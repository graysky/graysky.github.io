--- 
wordpress_id: 109
title: JavaScript as Web Service API
wordpress_url: http://208.75.86.216/?p=109
layout: post
---
The last thing I would ever want to do is add any more noise to the impossibly over-hyped <a href="http://en.wikipedia.org/wiki/AJAX">AJAX</a>, but there is one aspect of it that I'm looking forward to gaining popularity. I mean, aside from it completely re-inventing the <a href="http://radar.oreilly.com/archives/2005/08/not_20.html">web 2.0</a> and <a href="http://it.slashdot.org/article.pl?sid=05/05/24/159211">destroying microsoft</a> and all that. I've been playing around a bit with the <a href="http://www.google.com/apis/maps/">Google Maps API</a>, and think it is clever how they use JavaScript to define their API. It shields the caller from all of the details of how they use AJAX to get the map data or do event handling within the map. The Google Map <a href="http://www.google.com/apis/maps/documentation/#The_Hello_World_of_Google_Maps">"Hello World"</a> is trivial. Even those who think JavaScript is a hella cool programming language can grab a snippet from their friend's livejournal and get something working. Want to put a map on your blog of all the places you've traveled? Or where you buried all those hitchhikers?

Now compare that with the backend python code I wrote that uses XML-RPC to do some <a href="http://geocoder.us/">geocoding</a> of addresses into latitude and longitude. First, you need to be comfortable enough to write <em>real code</em>, not just copy-n-paste in some Javascript. And let's remember that XML-RPC is on the simpler end of the web services spectrum. Second, it lets the provider more easily upgrade the service when they transparently add in new features like their <a href="http://arstechnica.com/news.ars/post/20050723-5130.html">hybrid view</a>. Third, it raises the level of abstraction. Instead of getting back a hashtable of key/value pairs, they draw the whole map and you just supply some locations and data. (In the simple case, it could get more complex.) While I have some reservations about making the client-side the integration point or ever wanting to write more JavaScript than is absolutely necessary, it could now be very easy to wire up several different web services for your own nefarious purposes. Feels like simple web services for the dirty, unwashed masses.
